const puppeteer = require('puppeteer');
const fs = require('fs');

async function getAndSaveDefacedUrls() {
    const browser = await puppeteer.launch({
        headless: false,
        slowMo: 50,
        defaultViewport: null,
        args: ['--start-maximized']
    });

    const page = await browser.newPage();
    const OUTPUT_FILE = 'defacement_url.txt';

    if (fs.existsSync(OUTPUT_FILE)) {
        console.log(`üìÑ T√¨m th·∫•y ${OUTPUT_FILE}, s·∫Ω ghi n·ªëi ti·∫øp.`);
    } else {
        console.log(`üÜï T·∫°o m·ªõi t·ªáp ${OUTPUT_FILE}.`);
    }

    for (let attempt = 41471031; attempt > 41471031 - 1000; attempt--) {
        const url = `https://www.zone-h.org/mirror/id/${attempt}`;
        console.log(`üü¢ Truy c·∫≠p: ${url}`);

        try {
            await page.goto(url, { waitUntil: 'domcontentloaded', timeout: 15000 });

            // 1. Ki·ªÉm tra xem c√≥ captcha kh√¥ng
            const isCaptcha = await page.$('img[src*="captcha"]');
            if (isCaptcha) {
                console.log('üõë Ph√°t hi·ªán CAPTCHA ‚Äî vui l√≤ng nh·∫≠p tay v√† nh·∫•n "G·ª≠i" trong tr√¨nh duy·ªát.');
                await page.waitForFunction(
                    () => !document.querySelector('img[src*="captcha"]'),
                    { timeout: 120000 } // ch·ªù t·ªëi ƒëa 2 ph√∫t
                );
                console.log('‚úÖ CAPTCHA ƒë√£ qua ‚Äî ti·∫øp t·ª•c thu th·∫≠p d·ªØ li·ªáu...');
            }

            // 2. Tr√≠ch th√¥ng tin t·ª´ mirror n·∫øu captcha ƒë√£ v∆∞·ª£t
            const domainText = await page.evaluate(() => {
                const el = [...document.querySelectorAll("li")].find(e =>
                    e.textContent.includes("Domain:")
                );
                return el ? el.textContent : null;
            });

            if (domainText) {
                const extracted = domainText.split('Domain:')[1].split('IP address:')[0].trim();
                fs.appendFileSync(OUTPUT_FILE, extracted + '\n');
                console.log(`‚úÖ ƒê√£ l∆∞u: ${extracted}\n`);
            } else {
                console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y domain trong trang.');
            }

        } catch (err) {
            console.log(`‚ùå L·ªói v·ªõi ID ${attempt}: ${err.message}`);
        }
    }

    await browser.close();
    console.log('üéâ Qu√©t ho√†n t·∫•t!');
}

getAndSaveDefacedUrls();
